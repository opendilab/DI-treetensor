name: Code Test

on:
  push:
    branches: [ main, 'dev/*', 'test/*', 'fix/*' ]
  pull_request:
    branches: [ main, 'dev/*', 'test/*', 'fix/*' ]

jobs:
  unittest:
    name: Code test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - 'ubuntu-20.04'
          - 'windows-2019'  # need to be fixed, see: https://github.com/opendilab/treevalue/issues/41
          - 'macos-10.15'
        python-version:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
        numpy-version:
          - '1.18.0'
          - '1.22.0'
        torch-version:
          - '1.2.0'
          - '1.6.0'
          - '1.10.0'
          - '1.12.0'
        exclude:
          - python-version: '3.7'
            numpy-version: '1.22.0'
          - python-version: '3.10'
            numpy-version: '1.18.0'
          - python-version: '3.8'
            torch-version: '1.2.0'
          - python-version: '3.9'
            torch-version: '1.2.0'
          - python-version: '3.9'
            torch-version: '1.6.0'
          - python-version: '3.10'
            torch-version: '1.2.0'
          - python-version: '3.10'
            torch-version: '1.6.0'
          - python-version: '3.10'
            torch-version: '1.10.0'
          - os: 'windows-2019'
            torch-version: '1.2.0'
          - os: 'windows-2019'
            torch-version: '1.6.0'
          - os: 'windows-2019'
            python-version: '3.9'
            numpy-version: '1.18.0'
          - os: 'windows-2019'
            python-version: '3.10'
            numpy-version: '1.18.0'

    steps:
      - name: Get system version for Linux
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          echo "OS_NAME=Linux" >> $GITHUB_ENV
          echo "IS_WIN=" >> $GITHUB_ENV
          echo "IS_MAC=" >> $GITHUB_ENV
      - name: Get system version for Windows
        if: ${{ runner.os == 'Windows' }}
        shell: bash
        run: |
          echo "OS_NAME=Windows" >> $GITHUB_ENV
          echo "IS_WIN=1" >> $GITHUB_ENV
          echo "IS_MAC=" >> $GITHUB_ENV
      - name: Get system version for MacOS
        if: ${{ runner.os == 'macOS' }}
        shell: bash
        run: |
          echo "OS_NAME=MacOS" >> $GITHUB_ENV
          echo "IS_WIN=" >> $GITHUB_ENV
          echo "IS_MAC=1" >> $GITHUB_ENV
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 20
      - name: Set up system dependences on linux
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y tree cloc wget curl make graphviz
          dot -V
      - name: Set up system dependences on Windows
        if: ${{ env.OS_NAME == 'Windows' }}
        shell: bash
        run: |
          choco install tree cloc wget curl make zip graphviz
          dot -V
      - name: Set up system dependences on MacOS
        if: ${{ env.OS_NAME == 'MacOS' }}
        shell: bash
        run: |
          brew install tree cloc wget curl make zip graphviz
          dot -V
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install basic dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade flake8 setuptools wheel twine
      - name: Install numpy v${{ matrix.numpy-version }}
        if: ${{ matrix.numpy-version != 'latest' }}
        shell: bash
        run: |
          pip install 'numpy==${{ matrix.numpy-version }}'
      - name: Install pytorch v${{ matrix.torch-version }}
        if: ${{ matrix.torch-version != 'latest' }}
        shell: bash
        run: |
          pip install 'torch==${{ matrix.torch-version }}'
      - name: Install dependencies
        shell: bash
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      - name: Test the basic environment
        shell: bash
        run: |
          python -V
          pip --version
          pip list
          tree .
          cloc treetensor
          cloc test
      - name: Run unittest
        env:
          CI: 'true'
        shell: bash
        run: |
          make unittest
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
