array\_equal
=================

.. currentmodule:: treetensor.numpy

    
Documentation
------------------

.. autofunction:: array_equal

    
.. admonition:: Numpy Version Related
    :class: tip

    This documentation is based on 
    `numpy.array_equal <https://numpy.org/doc/1.21/reference/generated/numpy.array_equal.html>`_ 
    in `numpy v1.21.5 <https://numpy.org/doc/1.21/>`_.
    **Its arguments' arrangements depend on the version of numpy you installed**.
    
    If some arguments listed here are not working properly, please check your numpy's version 
    with the following command and find its documentation.
    
    .. code-block:: shell
        :linenos:
    
        python -c 'import numpy as np;print(np.__version__)'
    
    
    
    The arguments and keyword arguments supported in numpy v1.21.5 is listed below.
    
    

Description From Numpy v1.21
---------------------------------

.. currentmodule:: numpy

    
.. function:: True if two arrays have the same shape and elements, False otherwise.


Parameters
~~~~~~~~~~
    a1, a2 \: array_like
        Input arrays.
    equal_nan \: bool
        Whether to compare NaN's as equal. If the dtype of a1 and a2 is
        complex, values will be considered equal if either the real or the
        imaginary component of a given value is ``nan``.

        .. versionadded:: 1.19.0

Returns
~~~~~~~
    b \: bool
        Returns True if the arrays are equal.

See Also
~~~~~~~~
    allclose: Returns True if two arrays are element-wise equal within a
              tolerance.
    array_equiv: Returns True if input arrays are shape consistent and all
                 elements equal.

Examples
~~~~~~~~
    >>> np.array_equal([1, 2], [1, 2])
    True
    >>> np.array_equal(np.array([1, 2]), np.array([1, 2]))
    True
    >>> np.array_equal([1, 2], [1, 2, 3])
    False
    >>> np.array_equal([1, 2], [1, 4])
    False
    >>> a = np.array([1, np.nan])
    >>> np.array_equal(a, a)
    False
    >>> np.array_equal(a, a, equal_nan=True)
    True

    When ``equal_nan`` is True, complex values with nan components are
    considered equal if either the real *or* the imaginary components are nan.

    >>> a = np.array([1 + 1j])
    >>> b = a.copy()
    >>> a.real = np.nan
    >>> b.imag = np.nan
    >>> np.array_equal(a, b, equal_nan=True)
    True



